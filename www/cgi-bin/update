#!/usr/bin/python3
import sys
import os
from urllib.parse import parse_qs
import re
import csv 
import yaml

# sudo pip3 install dnspython
import dns.resolver
import dns.tsigkeyring
import dns.update
import dns

# enable debugging features always
debug = False
# enable debug parameter to selectively turn debugging
debugParameterAllow = False

# we get this from the apache config
ddBaseDir = os.environ.get("DD_BASE_DIR", ".")
dataDir = f"{ddBaseDir}/data"
secureDir = f"{ddBaseDir}/secure"

authorizedHostsFilename = f"{dataDir}/authorizedHosts.csv"
zoneInfoFilename = f"{dataDir}/zoneInfo.csv"

# make global
# formFields = cgi.FieldStorage()
# formFields = dict(parse_qsl(os.environ.get("QUERY_STRING", "")))
# changed from parse_qsl to parse_qs to handle multiple txt values
formFields = dict(parse_qs(os.environ.get("QUERY_STRING", ""),keep_blank_values=True))

# returns true if the string is an IPv4 Address
def isValidIPv4Address(str):
    try:
        dns.ipv4.inet_aton(str)
        return True
    except:
        return False

# returns true if the string is an IPv6 Address
def isValidIPv6Address(str):
    try:
        dns.ipv6.inet_aton(str, True)
        return True
    except:
        return False
    
def isValidIPAddress(str):
    return isValidIPv4Address(str) or isValidIPv6Address(str)

# returns true if the string is a valid hostname
def isValidHostname(str):
    try:
        # Check if the length of the hostname is within the valid limit
        if (len(str) > 255):
            return False

        # Split the hostname into individual labels
        labels = str.split('.')

        # Check each label for length and validity
        for label in labels:
            if len(label) > 63:
                return False
            
            # regex is not perfect, but handles most scenarios
            if (not re.match(r'^(?:[a-zA-Z0-9_][a-zA-Z0-9-]*)?[a-zA-Z0-9]$', label)):
                return False

        return True

    except:
        return False

# gets the "best available" IP address(es) from form fields and variables from the server
def getIpList():
    result = []

    # first we'll get all the possible options
    myipAll = formFields.get("myip",[])

    # X-Forwarded-For can have multiple values if multiple proxy servers are traversed.
    # The last one is the one we want
    xForwardedFor = os.environ.get("HTTP_X_FORWARDED_FOR",None)
    if (xForwardedFor):
        xForwardedFor = xForwardedFor.split()[-1]
    
    # There are mixed views on if this is X-Client-IP or Client-IP
    xClientIP = os.environ.get("HTTP_X_CLIENT_IP",None)
    clientIP = os.environ.get("HTTP_CLIENT_IP",None)
    
    remoteAddr = os.environ.get("REMOTE_ADDR",None)

    if debug:
        print(myipAll)
        print(xForwardedFor)
        print(xClientIP)
        print(clientIP)
        print(remoteAddr)

    # now we'll pick the first valid one
    result = []
    
    # special case for myip parameter because we allow multiple ips
    # there can be multiple parameters, each one can be a comma seperated list
    myipList = []
    if (len(myipAll) > 0):
        for myipOne in myipAll:
            for ip in myipOne.split(','):
                if (isValidIPAddress(ip)):
                    myipList.append(ip)

    if (len(myipList) > 0):
        result = myipList
    elif (isValidIPAddress(xForwardedFor)):
        # print("xForwardedFor")
        result = [xForwardedFor]
    elif (isValidIPAddress(xClientIP)):
        # print("xClientIP")
        result = [xClientIP]
    elif (isValidIPAddress(clientIP)):
        # print("clientIP")
        result = [clientIP]
    elif (isValidIPAddress(remoteAddr)):
        # print("remoteAddr")
        result = [remoteAddr]

    return result

# get a list of hostnames from parameters
def getHostnameList():
    result = []

    # there can be multiple parameters, each one can be a comma seperated list
    hostnameAll = formFields.get("hostname",[])
    if (len(hostnameAll) > 0):
        for hostnameOne in hostnameAll:
            for hostname in hostnameOne.split(','):
                result.append(hostname)

    return result

# get a list of txt values from parameters
def getTxtParam():
    # get all the txt parameters and enclose each one in double quotes
    # the update would do this automatically, but we need to compare the results
    # quotes make this complicated
    result = ['"' + str + '"' for str in formFields.get("txt",[])]
    return result
    
allowedDeleteValues = ["A","AAAA","TXT"]

# get a list of types to be deleted from parameters
# only a fixed set of values is allowed, plus "ALL"
# if "ALL" is included, then all values will be used
def getDeleteParam():
    result = []

    # there can be multiple parameters, each one can be a comma seperated list
    deleteAll = formFields.get("delete",[])
    if (len(deleteAll) > 0):
        for deleteOne in deleteAll:
            for value in deleteOne.split(','):
                if ((value in allowedDeleteValues) and (value not in result)):
                    result.append(value)
                elif (value == "ALL"):
                    result = allowedDeleteValues
                    break

    return result

# return the logged in user
def getAuthorizedUser():
    return os.environ.get("REMOTE_USER",None)

# read the hostname patterns that are authorized for this user
def getHostnamePatterns(username):
    result = []
    try:
        with open(authorizedHostsFilename, 'r') as f:
            data = csv.reader(f)

            for row in data:
                if (len(row) == 3):
                    authorizedUser,pattern,zone = row
                    if (authorizedUser == username):
                        # we convert the simple pattern to a regex to be used later
                        rePattern = ("^" + pattern + "$").replace('.','\\.').replace('*','.*')
                        thisPattern = { "regex": rePattern, "zoneName": zone }
                        result.append(thisPattern)
        
        return result

    except:
        problemStop("getHostnamePatterns")

# finds the given zone in the csv file
def getZoneInfo(zone):
    try:
        with open(zoneInfoFilename, 'r') as f:
            data = csv.reader(f)

            for row in data:
                if (len(row) == 4):
                    name,nameServerIP,nameServerPort,keyFile = row
                    if (name == zone):
                        thisZone = { "name": name, "nameServerIP": nameServerIP, "nameServerPort": int(nameServerPort), "keyFile": keyFile}
                        return thisZone

        problemStop("getZoneInfo 1")     

    except:
        problemStop("getZoneInfo 2")

# scans the allowed patterns and returns the zone name for the first one
# that matches the given hostname
def getHostnameZone(hostname,allowedPatterns):
    for pattern in allowedPatterns:
        if (re.match(pattern["regex"],hostname)):
            return pattern["zoneName"]
    return None

# returns true if any pattern matches the given hostname
def isAuthorizedHostname(hostname,allowedPatterns):
    zoneName = getHostnameZone(hostname,allowedPatterns)
    if (zoneName is not None):
        return True
    else:
        return False

# simple dns lookup that returns the list of values
def getCurrentDNS(hostname,recordType,nameServerIP,nameServerPort):
    resolver = dns.resolver.Resolver()
    resolver.nameservers = [nameServerIP]
    resolver.port = nameServerPort
    resolver.no_recurse = True

    if debug:
        print(resolver.nameservers)
        print(resolver.port)

    result = []
    try:
        answers = resolver.query(hostname, rdtype=recordType)
        # put the values for each of the answers into the list
        result.extend(str(answer) for answer in answers)
    except dns.resolver.NXDOMAIN:
        # name does not exist
        pass
    except dns.resolver.NoAnswer:
        # no results for this type
        pass
    except:
        dnserrStop(sys.exc_info()[0])
    
    return result

# gets the secure key information for a given zone
# keyfile is in the format:
# algorithm:keyname:secretkey
def getTsigKey(zoneInfo):
    try:
        keyPath = f'{secureDir}/{zoneInfo["keyFile"]}'
        if debug:
            print(keyPath)
        with open(keyPath, 'r') as file:
            line = file.readline().strip()
            if debug:
                print(line)
            fields = line.split(':')
            
            if len(fields) != 3:
                if debug:
                    print("not 3 fields")
                raise ValueError("File should contain exactly 3 colon-separated fields.")
            
            algorithm, id_, secret = fields
            resultDict = {
                "algorithm": algorithm,
                "id": id_,
                "secret": secret
            }
            return resultDict
    except:
        problemStop("getTsigKey")
    return data

# server headers that will (attempt to) prevent a browser from caching results
def printNoCacheHeaders():
    print("Cache-Control: no-cache, no-store, max-age=0, must-revalidate")
    print("Expires: Mon, 01 Jan 1990 00:00:00 GMT")
    print("Pragma: no-cache")

# print a message and stop
def stopMessage(str):
    print(str)
    sys.exit(0)

# print 911 message with extra message if in debug mode
def problemStop(str = None):
    result = "911"
    if (debug and (str is not None)):
        result += f" {str}"
    stopMessage(result)

# print the dnserr message with extra message if in debug mode
def dnserrStop(str = None):
    result = "dnserr"
    if (debug and (str is not None)):
        result += f" {str}"
    stopMessage(result)

# the main checkip function returns a text list of the "best available" IP address(es)
def checkip():
    print("Content-type: text/plain")
    printNoCacheHeaders()
    print("")

    for ip in getIpList():
        print(ip)

# this procedure performs the update for IP addresses if needed
def updateIPs(hostname, ipList, zoneInfo):
    # dns functions need this hostname object to operate the way we need them to
    hostnameObj = dns.name.from_text(hostname)

    # get the current values from dns for comparison
    currentIPs = getCurrentDNS(hostnameObj,"A",zoneInfo["nameServerIP"],zoneInfo["nameServerPort"])
    currentIPs.extend(getCurrentDNS(hostnameObj,"AAAA",zoneInfo["nameServerIP"],zoneInfo["nameServerPort"]))

    if debug:
        print(currentIPs)
        print(ipList)

    # convert current and requested to sets for easier comparison
    currentUnique = set(currentIPs)
    requestedUnique = set(ipList)
    
    # if there are any differences, we will always do the same
    if (requestedUnique.symmetric_difference(currentUnique)):
        zoneNameObj = dns.name.from_text(zoneInfo["name"])

        tsigKey = getTsigKey(zoneInfo)
        if debug:
            print(tsigKey)

        # create the update object with the secret key
        keyring = dns.tsigkeyring.from_text({tsigKey["id"]: tsigKey["secret"]})
        keyring["algorithm"] = tsigKey["algorithm"].lower()
        update = dns.update.Update(zoneNameObj, keyring=keyring)

        # first delete any current records
        update.delete(hostnameObj, 'A')
        update.delete(hostnameObj, 'AAAA')

        # now add each requested IP address
        defaultTTL = "30"
        for ip in requestedUnique:
            if (isValidIPv4Address(ip)):
                rType = "A"
            else:
                rType = "AAAA"
            update.add(hostnameObj, defaultTTL, rType, ip)

        # do the update with error and exception handling
        try: 
            response = dns.query.tcp(update, zoneInfo["nameServerIP"], port=zoneInfo["nameServerPort"])
            if (response.rcode() == dns.rcode.NOERROR):
                print("good " + ','.join(requestedUnique))
            else:
                dnserrStop("updateIPs")
        except:
            dnserrStop("updateIPs except")

    else:
        # no update needed
        print("nochg " + ','.join(currentIPs))

# this procedure performs the update for TXT records if needed
def updateTXT(hostname, newTXTs, zoneInfo):
    hostnameObj = dns.name.from_text(hostname)

    # get the current values from dns for comparison
    currentTXTs = getCurrentDNS(hostnameObj,"TXT",zoneInfo["nameServerIP"],zoneInfo["nameServerPort"])

    if debug:
        print(currentTXTs)
        print(newTXTs)

    # convert current and requested to sets for easier comparison
    currentUnique = set(currentTXTs)
    newUnique = set(newTXTs)

    # if there are any differences, we will always do the same
    if (newUnique.symmetric_difference(currentUnique)):
        zoneNameObj = dns.name.from_text(zoneInfo["name"])

        tsigKey = getTsigKey(zoneInfo)
        if debug:
            print(tsigKey)

        # create the update object with the secret key
        keyring = dns.tsigkeyring.from_text({tsigKey["id"]: tsigKey["secret"]})
        keyring["algorithm"] = tsigKey["algorithm"].lower()
        update = dns.update.Update(zoneNameObj, keyring=keyring)

        defaultTTL = "0"
        rType = "TXT"
        # first delete any current records
        update.delete(hostnameObj, rType)
        # now add each requested TXT record
        for txt in newUnique:
            update.add(hostnameObj, defaultTTL, rType, txt)

        # do the update with error and exception handling
        try: 
            response = dns.query.tcp(update, zoneInfo["nameServerIP"], port=zoneInfo["nameServerPort"])
            if (response.rcode() == dns.rcode.NOERROR):
                print("good " + ','.join(newUnique))
            else:
                dnserrStop("updateTXT")
        except:
            dnserrStop("updateTXT except")       

    else:
        # no update needed
        print("nochg " + ','.join(currentTXTs))

def delete(hostname, deleteTypes, zoneInfo):
    hostnameObj = dns.name.from_text(hostname)

    # see if there are any current values that need to be deleted
    deletesNeeded = False
    for type in deleteTypes:
        if (len(getCurrentDNS(hostnameObj,type,zoneInfo["nameServerIP"],zoneInfo["nameServerPort"])) > 0):
            deletesNeeded = True
            break
    
    # if deletes are needed
    if (deletesNeeded):
        zoneNameObj = dns.name.from_text(zoneInfo["name"])

        tsigKey = getTsigKey(zoneInfo)
        if debug:
            print(tsigKey)

        # create the update object with the secret key
        keyring = dns.tsigkeyring.from_text({tsigKey["id"]: tsigKey["secret"]})
        keyring["algorithm"] = tsigKey["algorithm"].lower()
        update = dns.update.Update(zoneNameObj, keyring=keyring)

        # add each type to be deleted
        for rType in deleteTypes: 
            update.delete(hostnameObj, rType)

        # do the update with error and exception handling
        try: 
            response = dns.query.tcp(update, zoneInfo["nameServerIP"], port=zoneInfo["nameServerPort"])
            if (response.rcode() == dns.rcode.NOERROR):
                print("good")
            else:
                dnserrStop("delete")
        except:
            dnserrStop("delete except")        
    else:
        # no update needed
        print("nochg")


# the main update function that validates the parameters and decides what update is being requested
def update():
    print("Content-type: text/plain")
    printNoCacheHeaders()
    print("")

    # first need to check for parameter combination issues
    # set booleans for later, but also count parameters at the same time
    doUpdateIP = False
    doUpdateTXT = False
    doDelete = False

    actionCount = 0
    if ("txt" in formFields):
        doUpdateTXT = True
        actionCount += 1
    
    if ("delete" in formFields):
        doDelete = True
        actionCount += 1

    # if none of the update parameters, then updating the IPs is the default action
    if ((actionCount == 0) or ("myip" in formFields)):
        doUpdateIP = True
        actionCount += 1

    if (actionCount > 1):
        stopMessage("badparam")

    username = getAuthorizedUser()
    hostnameList = getHostnameList()
    ipList = getIpList()
    txtParam = getTxtParam()
    deleteTypes = getDeleteParam()

    # now checking specific parameter limits
    if (len(hostnameList) == 0):
        stopMessage("notfqdn")

    if (len(hostnameList) > 20):
        stopMessage("numhost")

    if (len(ipList) > 20):
        stopMessage("numip")

    # get the allowed patters for the current user
    allowedPatterns = getHostnamePatterns(username)

    # loop through each given hostname 
    for hostname in hostnameList:
        if debug:
            print(hostname)

        # check hostname (notfqdn)
        if (not isValidHostname(hostname)):
            print("notfqdn")

        # check hostname authorization (nohost,abuse)
        else:
            zoneName = getHostnameZone(hostname,allowedPatterns)
            if (zoneName is None):
                print("nohost")
            else:
                # now we are authorized to do an update

                # get the zoneInfo for this zone
                zoneInfo = getZoneInfo(zoneName)
                if debug:
                    print(zoneInfo)

                # now call the specific update function
                if (doUpdateIP):
                    # set ips
                    updateIPs(hostname, ipList, zoneInfo)
                elif (doUpdateTXT):
                    # set txt
                    updateTXT(hostname, txtParam, zoneInfo)
                elif (doDelete):
                    # do delete
                    delete(hostname, deleteTypes, zoneInfo)


# (for debugging) display parameters
def checkParams():
    print("Content-type: text/plain")
    printNoCacheHeaders()
    print("")

    print("Hostnames:")
    hostnameList = getHostnameList()
    for hostname in hostnameList:
        print(hostname)

    print("")
    print("Valid IPs:")
    ipList = getIpList()
    for ip in ipList:
        print(ip)

    print("")
    print("TXT:")
    txtParam = getTxtParam()
    print(txtParam)

    print("")
    print("Delete:")
    deleteParam = getDeleteParam()
    print(deleteParam)

    print("")

# (for debugging) 
def print_variable(name, value):
    print(f'<li><strong>{name}:</strong> {value}</li>')

# (for debugging) display parameters and server variables and more in nicer HTML
def debugHTML():
    print("Content-type: text/html")
    printNoCacheHeaders()
    print("")

    print("<html><head>")
    print("<title>Server Variables and CGI Parameters</title>")
    print("<link rel='icon' href='data:,'>")
    print("</head><body>")
    print("<h1>Server Variables and CGI Parameters</h1>")
    print("<ul>")
    
    # Server Variables
    print("<h2>Server Variables</h2>")
    for key, value in os.environ.items():
        print_variable(key, value)
    
    # CGI Parameters
    print("<h2>CGI Parameters</h2>")
    for key in formFields:
        print_variable(key, formFields[key])
        
    print("</ul>")

    if ("myip" in formFields):
        for ip in getIpList():
            print(ip)
            if (isValidIPv4Address(ip)):
                print("IPv4")
            elif (isValidIPv6Address(ip)):
                print("IPv6")
            else:
                print("not IP")
            print("<br>")

    print("</body></html>")

# this function will determine what is being asked. 
# configured correctly, the web server will send ALL requests here, so we need to 
# determine what paths we respond to and how
# this is where we can add support for other ddns APIs
def main():
    SCRIPT_NAME = ""
    if ("SCRIPT_NAME" in os.environ):
        SCRIPT_NAME = os.environ["SCRIPT_NAME"]

    # checkip endpoint
    if (SCRIPT_NAME == "/checkip"):
        checkip()
    
    # dyndns legacy and v3 protocol endpoints (extended)
    elif (SCRIPT_NAME in ["/nic/update",
                          "/v3/update"]):
        update()
    else:
        if debug:
            if (SCRIPT_NAME == "/checkparams"):
                checkParams()
            elif (SCRIPT_NAME == "/err"):
                print("you should never see this")
            else:
                debugHTML()
        else:
            stopMessage("badop")

# if requested, turn on debug parameter as soon as possible
if ((debugParameterAllow) and ("debug" in formFields)):
    debug = True

# the python main entrypoint 
if __name__ == "__main__":
    try:
        main()

    # this catches all exceptions that were not handled properly.
    # display is only when in debug mode
    except Exception as e:
        if debug:
            # Print the exception information to stdout
            print("An exception occurred:")
            print(f"Type: {type(e).__name__}")
            print(f"Message: {str(e)}")
            print("Traceback (most recent call last):")
            traceback = sys.exc_info()[2]
            for frame in traceback.tb_next:
                print(f'  File "{frame.tb_frame.f_code.co_filename}", line {frame.tb_lineno}, in {frame.tb_frame.f_code.co_name}')
                print(f'    {frame.tb_frame.f_code.co_name}({", ".join(repr(arg) for arg in frame.tb_frame.f_code.co_varnames)})')
            print(f"{type(e).__name__}: {str(e)}")
        else:
            problemStop()

