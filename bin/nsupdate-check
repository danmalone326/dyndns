#!/usr/bin/python3
import dns.query
import dns.tsigkeyring
import dns.update
import dns.resolver
import os
import sys
import csv
import string
import random
import binascii

debug = False

ddBaseDir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
dataDir = f"{ddBaseDir}/data"
secureDir = f"{ddBaseDir}/secure"
zoneInfoFilename = f"{dataDir}/zoneInfo.csv"


def problemStop(str):
    print(str)
    sys.exit()

# returns true if the string is an IPv4 Address
def isValidIPv4Address(str):
    try:
        dns.ipv4.inet_aton(str)
        return True
    except:
        return False

# returns true if the string is an IPv6 Address
def isValidIPv6Address(str):
    try:
        dns.ipv6.inet_aton(str, True)
        return True
    except:
        return False
    
def isValidIPAddress(str):
    return isValidIPv4Address(str) or isValidIPv6Address(str)

# finds the given zone in the csv file
def getZoneInfo(zone):
    try:
        if debug:
            print(zoneInfoFilename)

        with open(zoneInfoFilename, 'r') as f:
            data = csv.reader(f)

            for row in data:
                if (len(row) == 4):
                    name,nameServer,nameServerPort,keyFile = row

                    if (name == zone):
                        if (isValidIPAddress(nameServer)):
                            nameServerIP = nameServer
                        else:
                            nameServerIP = getCurrentDNS(nameServer, 'A')[0]

                        thisZone = { "name": name, "nameServer": nameServer, "nameServerIP": nameServerIP, "nameServerPort": int(nameServerPort), "keyFile": keyFile}
                        return thisZone

        return None

    except Exception as e:
        problemStop(f"getZoneInfo: {str(e)}")

# gets the secure key information for a given zone
# keyfile is in the format:
# algorithm:keyname:secretkey
def getTsigKey(zoneInfo):
    try:
        keyPath = f'{secureDir}/{zoneInfo["keyFile"]}'
        if debug:
            print(keyPath)
        with open(keyPath, 'r') as file:
            line = file.readline().strip()
            if debug:
                print(line)
            fields = line.split(':')
            
            if len(fields) != 3:
                if debug:
                    print("not 3 fields")
                raise ValueError("Key file should contain exactly 3 colon-separated fields.")
            
            algorithm, id_, secret = fields
            resultDict = {
                "algorithm": algorithm,
                "id": id_,
                "secret": secret
            }
            return resultDict
    except FileNotFoundError:
        print(f"Key file not found: {keyPath}")
        return None
    except ValueError as e:
        print(str(e))
        return None
    except Exception as e:
        problemStop(f"getTsigKey: {str(e)}")

# simple dns lookup that returns the list of values
def getCurrentDNS(queryHostname,recordType='A',nameServerIP=None,nameServerPort=53,recursive=True):
    resolver = dns.resolver.Resolver()

    if (nameServerIP!=None):
        resolver.nameservers = [nameServerIP]
        resolver.port = nameServerPort
    # resolver.no_recurse = True
    if (not recursive):
        resolver.set_flags(0b0000000000000000)

    if debug:
        print(queryHostname)
        print(recordType)
        print(resolver.nameservers)
        print(resolver.port)

    result = []
    try:
        answers = resolver.resolve(queryHostname, rdtype=recordType)
        if debug:
            print(str(len(answers)) + " Answers")
        # put the values for each of the answers into the list
        result.extend(str(answer) for answer in answers)
    except dns.resolver.NXDOMAIN:
        # name does not exist
        if debug: 
            print("NXDOMAIN")
        pass
    except dns.resolver.NoAnswer:
        # no results for this type
        if debug: 
            print("NoAnswer")
        pass
    
    return result

def getInput(prompt,default=None):
    if (default):
        defaultStr = f" ({default})"
    else:
        defaultStr = ""
    result = input(f"{prompt}{defaultStr}: ") or default
    return result

def main():
    # get zone, authoritative DNS server, and port

    # first we get the zone
    zone = getInput("Zone to verify","local.dns")
    if (zone == None):
        print("zone required.")
        return
    
    testExisting = False

    # if the zone and key are already configured, we have the option of testing the existing configuration
    # for each input after this, we have options:
    # 1. if test existing configuration is chosen, we just use the existing value and do not ask.
    # 2. if test existing configuration is not chosen, we ask, and provide the existing values as default
    # 3. if zone exists and key does not, we ask, and provide the existing values as default
    # 4. if zone does not exist, we ask for everything, with most not having defaults
    zoneInfo = getZoneInfo(zone)
    if (zoneInfo):
        tsigKey = getTsigKey(zoneInfo)
    else:
        tsigKey = None

    # if (zoneInfo and tsigKey):
    #     testResponse = getInput("Would you like to test existing configuration?", "Y").upper()[:1]
    #     if (testResponse == "Y"):
    #         testExisting = True

    # get the authoritative dns server name/ip
    if (zoneInfo):
        defaultValue = zoneInfo["nameServer"]
    else:
        # try to get a default value for authoritative name server
        try:
            soaRecord = getCurrentDNS(zone, 'SOA')
            if (len(soaRecord) == 1):
                if debug: 
                    print(soaRecord)
                defaultValue = soaRecord[0].split(' ')[0][:-1]
            else:
                defaultValue = None
        except:
            defaultValue = None

    if (testExisting):
        dnsServerInput = defaultValue
    else:
        dnsServerInput = getInput(f"Authoritative DNS server name or IP", defaultValue)

    # look up authoritative dns server ip if given as a name
    try:
        if (isValidIPAddress(dnsServerInput)):
            dnsServerIp = dnsServerInput
        else:
            dnsServerIp = getCurrentDNS(dnsServerInput, 'A')[0]
    except dns.exception.DNSException as e:
        print(f"Error resolving DNS server IP: {e}")
        return

    # get the authoritative dns server port
    if (zoneInfo):
        defaultValue = zoneInfo["nameServerPort"]
    else:
        defaultValue = 53

    if (testExisting):
        dnsServerPort = defaultValue
    else:
        dnsServerPort = int(getInput("Authoritative DNS server port", str(defaultValue)))

    print(f"Using DNS server: {dnsServerIp}:{dnsServerPort}")

    # verify what we have so far, no use going on if this doesn't work
    # verify by querying soa record
    # we save the serial number for later to confirm updates
    try:
        soaRecord = getCurrentDNS(zone, 'SOA', dnsServerIp, dnsServerPort)
        if (len(soaRecord) == 1):
            print("Zone SOA query successful.")
            if debug: 
                print(soaRecord)
            serialNumber = soaRecord[0].split(' ')[2]
            print(f"Serial number: {serialNumber}")
        else:
            print("Zone SOA query failed.")
            return
    except dns.exception.DNSException as e:
        print(f"SOA record query failed: {e}")
        return

    # now we collect dynamic DNS key info

    # get the tsig algorithm
    if (tsigKey):
        defaultValue = tsigKey["algorithm"]
    else:
        defaultValue = "hmac-sha256"

    if (testExisting):
        algorithm = defaultValue
    else:
        algorithm = getInput("Dynamic DNS key algorithm", defaultValue)
        
    # get the tsig key name/id
    if (tsigKey):
        defaultValue = tsigKey["id"]
    else:
        defaultValue = ""

    if (testExisting):
        keyName = defaultValue
    else:
        keyName = getInput("Dynamic DNS key name", defaultValue)

    # get the tsig secrest
    if (tsigKey):
        defaultValue = tsigKey["secret"]
    else:
        defaultValue = ""

    if (testExisting):
        secretKey = defaultValue
    else:
        secretKey = getInput("Dynamic DNS secret key", defaultValue)

    # create the tsig keyring 
    try:
        keyring=dns.tsigkeyring.from_text({keyName: secretKey})
        keyring["algorithm"] = algorithm.lower()
    except binascii.Error:
        print("There is a problem with the secret key.")
        return
    except Exception as e:
        print("There is a problem with the key information.")
        if debug:
            print(type(e).__name__)
            print(e)
        return

    # get a random name for testing
    testName = "nsupdate-check-" + "".join(random.choices(string.ascii_lowercase,k=8))
    # we need 2 versions of the fully qualified name
    # for updates, we need the ending period (.), for lookups we do not
    testLookupName = f"{testName}.{zone}"
    testUpdateName = f"{testLookupName}."

    # add an A record
    aRecordTest = '86.75.30.9'
    update = dns.update.Update(zone, keyring=keyring)

    update.delete(testUpdateName, 'A')
    update.add(testUpdateName, 300, 'A', aRecordTest)

    try:
        response = dns.query.tcp(update, dnsServerIp, port=dnsServerPort)
        print("A record added successfully.")
        if debug:
            print(response.to_text())
    except dns.exception.DNSException as e:
        print(f"Failed to add A record: {e}")
        return

    # verify A record now exists
    try:
        aRecordValue = getCurrentDNS(testLookupName, 'A', nameServerIP=dnsServerIp, nameServerPort=dnsServerPort, recursive=False)[0]
        if (aRecordValue == aRecordTest):
            print("A record value verified.")
        else:
            print(f"A record value verification failed. Expected: {aRecordTest}, Actual: {aRecordValue}")
    except dns.exception.DNSException as e:
        print(f"A record value verification failed: {e}") 

    # add TXT record
    update = dns.update.Update(zone, keyring=keyring)
    txtRecordData = "\"Testing dynamic DNS updates\""

    update.delete(testUpdateName, 'TXT')
    update.add(testUpdateName, 30, 'TXT', txtRecordData)

    try:
        response = dns.query.tcp(update, dnsServerIp, port=dnsServerPort)
        print("TXT record added successfully.")
        if debug:
            print(response.to_text())
    except dns.exception.DNSException as e:
        print(f"Failed to add TXT record: {e}")
        return

    # verify TXT record exists
    try:
        txtRecordValue = getCurrentDNS(testLookupName, 'TXT', nameServerIP=dnsServerIp, nameServerPort=dnsServerPort, recursive=False)[0]
        if (txtRecordValue == txtRecordData):
            print("TXT record value verified.")
        else:
            print(f"TXT record value verification failed. Expected: {txtRecordData}, Actual: {txtRecordValue}")
    except dns.exception.DNSException as e:
        print(f"TXT record value verification failed: {e}")

    # clean up by deleting A and TXT records
    update = dns.update.Update(zone, keyring=keyring)
    update.delete(testUpdateName, 'A')
    update.delete(testUpdateName, 'TXT')

    try:
        response = dns.query.tcp(update, dnsServerIp, port=dnsServerPort)
        print("Records deleted successfully.")
        if debug:
            print(response.to_text())
    except dns.exception.DNSException as e:
        print(f"Failed to delete records: {e}")
        return

    # get and display new serial number
    try:
        newSoaRecord = getCurrentDNS(zone, 'SOA', dnsServerIp, dnsServerPort)
        if (len(newSoaRecord) == 1):
            print("Zone SOA query successful.")
            if debug:
                print(newSoaRecord)
                
            newSerialNumber = newSoaRecord[0].split(' ')[2]
            print(f"New serial number: {newSerialNumber}")
            serialNumberDifference = int(newSerialNumber) - int(serialNumber)
            print(f"Number of updates: {serialNumberDifference}")
        else:
            print("Zone SOA query failed.")
            return
    except dns.exception.DNSException as e:
        print(f"SOA record query failed: {e}")
        return

    print("")
    print("Dynamic DNS update tests successful.")

    # display output for dyndns configuration
    if (not testExisting):
        print("")
        print("Do the following to configure for dyndns:")
        print("")

        print(f"Create a key file named {zone}.key with the following line:")
        print(f"{algorithm}:{keyName}:{secretKey}")

        print("")

        print("Add the following line to zoneInfo.csv:")
        print(f"{zone},{dnsServerInput},{dnsServerPort},{zone}.key")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("")
        pass